diff --git a/src/frontends/onnx/onnx_common/CMakeLists.txt b/src/frontends/onnx/onnx_common/CMakeLists.txt
index ef3d4ce3c1..d18be612a5 100644
--- a/src/frontends/onnx/onnx_common/CMakeLists.txt
+++ b/src/frontends/onnx/onnx_common/CMakeLists.txt
@@ -23,18 +23,15 @@ set_target_properties(${TARGET_NAME} PROPERTIES
 set(ONNX_COMMON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)
 set(ONNX_COMMON_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
 
-target_include_directories(${TARGET_NAME} PUBLIC $<BUILD_INTERFACE:${ONNX_COMMON_INCLUDE_DIR}>
-                                                 $<INSTALL_INTERFACE:${FRONTEND_INSTALL_INCLUDE}>)
+target_include_directories(${TARGET_NAME}
+    PUBLIC $<BUILD_INTERFACE:${ONNX_COMMON_INCLUDE_DIR}>
+           $<INSTALL_INTERFACE:${FRONTEND_INSTALL_INCLUDE}>
+    PRIVATE ${ONNX_COMMON_SRC_DIR})
 
 target_link_libraries(${TARGET_NAME} PRIVATE openvino::runtime)
 
-if(ONNX_USE_LITE_PROTO)
-    link_system_libraries(${TARGET_NAME} PUBLIC onnx_proto onnx protobuf::libprotobuf-lite)
-else()
-    link_system_libraries(${TARGET_NAME} PUBLIC onnx_proto onnx protobuf::libprotobuf)
-endif()
+link_system_libraries(${TARGET_NAME} PUBLIC onnx_proto onnx)
 
-target_include_directories(${TARGET_NAME} PRIVATE ${ONNX_COMMON_SRC_DIR})
 add_clang_format_target(${TARGET_NAME}_clang FOR_TARGETS ${TARGET_NAME})
 
-ov_install_static_lib(${TARGET_NAME} ${OV_CPACK_COMP_CORE})
+ov_install_static_lib(${TARGET_NAME} ${OV_CPACK_COMP_CORE})
\ No newline at end of file
diff --git a/thirdparty/CMakeLists.txt b/thirdparty/CMakeLists.txt
index a917a6b78b..4bde93f053 100644
--- a/thirdparty/CMakeLists.txt
+++ b/thirdparty/CMakeLists.txt
@@ -419,41 +419,33 @@ if(ENABLE_OV_PADDLE_FRONTEND OR ENABLE_OV_ONNX_FRONTEND OR ENABLE_OV_TF_FRONTEND
     if(ENABLE_SYSTEM_PROTOBUF)
         # Note: Debian / Ubuntu / RHEL libprotobuf.a can only be used with -DBUILD_SHARED_LIBS=OFF
         # because they are compiled without -fPIC
-        set(Protobuf_USE_STATIC_LIBS ON)
+        if(NOT DEFINED Protobuf_USE_STATIC_LIBS)
+            set(Protobuf_USE_STATIC_LIBS ON)
+        endif()
         if(CMAKE_VERBOSE_MAKEFILE)
             set(Protobuf_DEBUG ON)
         endif()
-        # Note: we also specify 'protobuf' in NAMES because of vcpkg
-        set(find_package_protobuf_names Protobuf protobuf)
+        if(OV_VCPKG_BUILD)
+            set(protobuf_config CONFIG)
+        endif()
         # try to find newer version first (major is changed)
         # see https://protobuf.dev/support/version-support/ and
         # https://github.com/protocolbuffers/protobuf/commit/d61f75ff6db36b4f9c0765f131f8edc2f86310fa
-        find_package(Protobuf 4.22.0 QUIET NAMES ${find_package_protobuf_names})
+        find_package(Protobuf 4.22.0 QUIET ${protobuf_config})
         if(NOT Protobuf_FOUND)
             # otherwise, fallback to existing default
-            find_package(Protobuf 3.20.3 REQUIRED NAMES ${find_package_protobuf_names})
+            find_package(Protobuf 3.20.3 REQUIRED ${protobuf_config})
         endif()
         set(PROTOC_EXECUTABLE protobuf::protoc)
-
-        # in case of system protobuf, we have to add version to OpenVINOConfig.cmake for static build
-        # to ensure no mismatch between versions of protoc and libprotobuf, we need to use exactly
-        # the same versions
-        set(Protobuf_VERSION ${Protobuf_VERSION} PARENT_SCOPE)
-
-        foreach(target ${PROTOC_EXECUTABLE} protobuf::libprotobuf protobuf::libprotobuf-lite)
-            set_target_properties(${target} PROPERTIES IMPORTED_GLOBAL ON)
-        endforeach()
     else()
-        add_subdirectory(protobuf EXCLUDE_FROM_ALL)
+        add_subdirectory(thirdparty/protobuf EXCLUDE_FROM_ALL)
     endif()
 
-    # forward variables used in the other places
-    set(PROTOC_DEPENDENCY ${PROTOC_DEPENDENCY} PARENT_SCOPE)
-    set(PROTOC_EXECUTABLE ${PROTOC_EXECUTABLE} PARENT_SCOPE)
-    set(Protobuf_IN_FRONTEND ON PARENT_SCOPE)
+    # forward additional variables used in the other places
+    set(Protobuf_IN_FRONTEND ON)
 
     # set public / interface compile options
-    foreach(target_name protobuf::libprotobuf protobuf::libprotobuf-lite)
+    function(_ov_fix_protobuf_warnings target_name)
         set(link_type PUBLIC)
         if(ENABLE_SYSTEM_PROTOBUF)
             set(link_type INTERFACE)
@@ -466,7 +458,12 @@ if(ENABLE_OV_PADDLE_FRONTEND OR ENABLE_OV_ONNX_FRONTEND OR ENABLE_OV_TF_FRONTEND
             endif()
             target_compile_options(${target_name} ${link_type} -Wno-undef)
         endif()
-    endforeach()
+    endfunction()
+
+    _ov_fix_protobuf_warnings(protobuf::libprotobuf)
+    if(TARGET protobuf::libprotobuf-lite)
+        _ov_fix_protobuf_warnings(protobuf::libprotobuf-lite)
+    endif()
 endif()
 
 #
