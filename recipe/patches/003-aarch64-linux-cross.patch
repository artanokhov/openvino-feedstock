diff --git a/modules/arm_plugin/thirdparty/CMakeLists.txt b/modules/arm_plugin/thirdparty/CMakeLists.txt
index c199492..a334f05 100644
--- a/modules/arm_plugin/thirdparty/CMakeLists.txt
+++ b/modules/arm_plugin/thirdparty/CMakeLists.txt
@@ -1,4 +1,4 @@
-# Copyright (C) 2020-2022 Intel Corporation
+# Copyright (C) 2018-2023 Intel Corporation
 # SPDX-License-Identifier: Apache-2.0
 #
 
@@ -22,23 +22,57 @@ if(ARM_COMPUTE_INCLUDE_DIR OR ARM_COMPUTE_LIB_DIR)
         set_target_properties(arm_compute PROPERTIES
             IMPORTED_LOCATION ${ARM_COMPUTE_LIB}
             INTERFACE_INCLUDE_DIRECTORIES ${ARM_COMPUTE_INCLUDE_DIR})
-        find_library(
-            ARM_COMPUTE_CORE_LIB
-            arm_compute_core-static
-            PATHS ${ARM_COMPUTE_LIB_DIR}
-        )
-        message(STATUS "Found arm_compute_core-static: ${ARM_COMPUTE_CORE_LIB}")
-        add_library(arm_compute_core STATIC IMPORTED GLOBAL)
-        set_target_properties(arm_compute_core PROPERTIES
-            IMPORTED_LOCATION ${ARM_COMPUTE_CORE_LIB}
-            INTERFACE_INCLUDE_DIRECTORIES ${ARM_COMPUTE_INCLUDE_DIR})
     endif()
 
     add_library(half INTERFACE IMPORTED GLOBAL)
     set_target_properties(half PROPERTIES
-        INTERFACE_INCLUDE_DIRECTORIES  ${ARM_COMPUTE_INCLUDE_DIR})
+        INTERFACE_INCLUDE_DIRECTORIES ${ARM_COMPUTE_INCLUDE_DIR})
+elseif(ENABLE_ARM_COMPUTE_CMAKE)
+    set(ARM_COMPUTE_SOURCE_DIR "${intel_cpu_thirdparty_SOURCE_DIR}/ComputeLibrary")
+    set(ARM_COMPUTE_BINARY_DIR "${intel_cpu_thirdparty_BINARY_DIR}/ComputeLibrary")
+
+    function(ov_build_compute_library)
+        # build ComputeLibrary as static libraries
+        set(BUILD_SHARED_LIBS OFF)
+        # ComputeLibrary settings
+        set(ARM_COMPUTE_GRAPH_ENABLED OFF CACHE BOOL "" FORCE)
+        # disable OpenMP
+        set(OPENMP OFF CACHE BOOL "" FORCE)
+        # and use std::threads instead
+        set(CPPTHREADS OFF CACHE BOOL "" FORCE)
+        # SVE is not supported on Darwin
+        if(CMAKE_HOST_APPLE)
+            set(ENABLE_SVE OFF CACHE BOOL "" FORCE)
+            set(ARM_COMPUTE_ENABLE_SVE OFF CACHE BOOL "" FORCE)
+            set(ARM_COMPUTE_ENABLE_SVEF32MM OFF CACHE BOOL "" FORCE)
+        endif()
+
+        add_subdirectory(${ARM_COMPUTE_SOURCE_DIR} ${ARM_COMPUTE_BINARY_DIR} EXCLUDE_FROM_ALL)
+
+        add_library(ArmCompute::Half INTERFACE IMPORTED GLOBAL)
+        set_target_properties(ArmCompute::Half PROPERTIES
+            INTERFACE_INCLUDE_DIRECTORIES "${ARM_COMPUTE_SOURCE_DIR}/include")
+    endfunction()
+
+    ov_build_compute_library()
+
+    # Helpers for oneDNN intergation
+
+    set(ACL_FOUND ON)
+    set(ACL_LIBRARIES arm_compute_core ArmCompute::Half)
+
+    foreach(acl_library IN LISTS ACL_LIBRARIES)
+        list(APPEND ACL_INCLUDE_DIRS
+                $<TARGET_PROPERTY:${acl_library},INTERFACE_INCLUDE_DIRECTORIES>)
+    endforeach()
+
+    # required by oneDNN to attempt to parse ACL version
+    set(ENV{ACL_ROOT_DIR} "${ARM_COMPUTE_SOURCE_DIR}")
 else()
-    message(STATUS "Configure to build ${CMAKE_CURRENT_SOURCE_DIR}/ComputeLibrary")
+    set(ARM_COMPUTE_SOURCE_DIR "${intel_cpu_thirdparty_SOURCE_DIR}/ComputeLibrary")
+    set(ARM_COMPUTE_BINARY_DIR "${intel_cpu_thirdparty_BINARY_DIR}/ComputeLibrary")
+
+    message(STATUS "Configure to build ${ARM_COMPUTE_SOURCE_DIR}")
 
     find_host_program(SCONS scons)
 
@@ -46,14 +80,20 @@ else()
         message(FATAL_ERROR "Scons tool is not found!")
     endif()
 
-    set(ARM_COMPURE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ComputeLibrary)
     file(GLOB_RECURSE SOURCES
-        ${ARM_COMPURE_SOURCE_DIR}/*.cpp
-        ${ARM_COMPURE_SOURCE_DIR}/*.hpp
-        ${ARM_COMPURE_SOURCE_DIR}/*.h
+        ${ARM_COMPUTE_SOURCE_DIR}/*.cpp
+        ${ARM_COMPUTE_SOURCE_DIR}/*.hpp
+        ${ARM_COMPUTE_SOURCE_DIR}/*.h
     )
 
-    set(extra_cxx_flags "-fPIC ${CMAKE_CXX_FLAGS} -Wno-undef")
+    set(extra_cxx_flags "${CMAKE_CXX_FLAGS} -Wno-undef")
+    if(MSVC64)
+        # clang-cl does not recognize /MP option
+        string(REPLACE "/MP " "" extra_cxx_flags "${extra_cxx_flags}")
+    else()
+        # -fPIC is not applicable for clang-cl
+        set(extra_cxx_flags "${extra_cxx_flags} -fPIC")
+    endif()
 
     set(ARM_COMPUTE_OPTIONS
         neon=1
@@ -71,30 +111,43 @@ else()
         # TODO: use CC for ARM compute library to minimize binary size
         # build_config=<file>
         # TODO: use data_type_support to disable useless kernels
-        # TODO: switch to NHWC layout later
-        data_layout_support=nchw
-        build_dir=${CMAKE_CURRENT_BINARY_DIR}
-        install_dir=${CMAKE_CURRENT_BINARY_DIR}/install
+        data_layout_support=all
         arch=${ARM_COMPUTE_TARGET_ARCH}
     )
 
+    if(NOT MSVC64)
+        list(APPEND ARM_COMPUTE_OPTIONS
+            build_dir=${ARM_COMPUTE_BINARY_DIR}
+            install_dir=${ARM_COMPUTE_BINARY_DIR}/install)
+    endif()
+
     if(ARM_COMPUTE_SCONS_JOBS)
         list(APPEND ARM_COMPUTE_OPTIONS --jobs=${ARM_COMPUTE_SCONS_JOBS})
     endif()
 
-    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
-        list(APPEND ARM_COMPUTE_OPTIONS
-             debug=1
-             asserts=1
-             logging=1)
+    set(ARM_COMPUTE_DEBUG_OPTIONS
+        debug=1
+        asserts=1
+        logging=1)
+
+    # cmake older 3.20 does not support generator expressions in add_custom_command
+    # https://cmake.org/cmake/help/latest/command/add_custom_command.html#examples-generating-files
+    if(OV_GENERATOR_MULTI_CONFIG AND CMAKE_VERSION VERSION_GREATER_EQUAL 3.20)
+        foreach(option IN LISTS ARM_COMPUTE_DEBUG_OPTIONS)
+            list(APPEND ARM_COMPUTE_OPTIONS $<$<CONFIG:Debug>:${option}>)
+        endforeach()
+    elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
+        list(APPEND ARM_COMPUTE_OPTIONS ${ARM_COMPUTE_DEBUG_OPTIONS})
     endif()
 
-    if(EMSCRIPTEN)
+    if(EMSCRIPTEN OR LINUX)
         list(APPEND ARM_COMPUTE_OPTIONS os=linux)
     elseif(ANDROID)
         list(APPEND ARM_COMPUTE_OPTIONS os=android)
     elseif(APPLE)
         list(APPEND ARM_COMPUTE_OPTIONS os=macos)
+    elseif(WIN32)
+        list(APPEND ARM_COMPUTE_OPTIONS os=windows)
     endif()
 
     if(CMAKE_CROSSCOMPILING)
@@ -135,6 +188,15 @@ else()
 
         set(extra_link_flags "${extra_link_flags} ${extra_flags}")
         set(extra_cxx_flags "${extra_cxx_flags} ${extra_flags}")
+    elseif(CMAKE_CROSSCOMPILING AND LINUX)
+        get_filename_component(cxx_compiler "${CMAKE_CXX_COMPILER}" NAME)
+        get_filename_component(c_compiler "${CMAKE_C_COMPILER}" NAME)
+        get_filename_component(compiler_prefix "${CMAKE_CXX_COMPILER}" DIRECTORY)
+
+        set(cmake_build_env
+            CC=${c_compiler}
+            CXX=${cxx_compiler})
+        list(APPEND ARM_COMPUTE_OPTIONS compiler_prefix="${compiler_prefix}/")
     elseif(EMSCRIPTEN)
         set(cmake_build_env
             CC=emcc
@@ -176,17 +238,29 @@ else()
                 set(extra_cxx_flags "${extra_cxx_flags} -arch ${arch}")
             endforeach()
         endif()
+    elseif(MSVC64)
+        if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.20)
+            set(extra_cxx_flags "${extra_cxx_flags} $<IF:$<CONFIG:Release>,/MD,/MDd>")
+        else()
+            if(CMAKE_BUILD_TYPE STREQUAL "Debug")
+                set(extra_cxx_flags "${extra_cxx_flags} /MDd")
+            else()
+                set(extra_cxx_flags "${extra_cxx_flags} /MD")
+            endif()
+        endif()
     endif()
 
     if(ENABLE_LTO)
-        if((CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR
-            CMAKE_CXX_COMPILER_ID MATCHES "^(Apple)?Clang$")
-           AND (NOT CMAKE_CROSSCOMPILING))
+        if((CMAKE_COMPILER_IS_GNUCXX OR OV_COMPILER_IS_CLANG) AND (NOT CMAKE_CROSSCOMPILING))
             set(extra_cxx_flags "${extra_cxx_flags} -flto=thin")
             set(extra_link_flags "${extra_link_flags} -flto=thin")
         endif()
     endif()
 
+    if(SUGGEST_OVERRIDE_SUPPORTED)
+        set(extra_cxx_flags "${extra_cxx_flags} -Wno-suggest-override")
+    endif()
+
     if(extra_link_flags)
         list(APPEND ARM_COMPUTE_OPTIONS extra_link_flags=${extra_link_flags})
     endif()
@@ -198,46 +272,57 @@ else()
         list(APPEND ARM_COMPUTE_OPTIONS --silent)
     endif()
 
-    set(arm_compute ${CMAKE_CURRENT_BINARY_DIR}/libarm_compute-static.a)
-    set(arm_compute_core ${CMAKE_CURRENT_BINARY_DIR}/libarm_compute_core-static.a)
+    if(MSVC64)
+        set(arm_compute build/arm_compute-static.lib)
+        set(arm_compute_full_path "${ARM_COMPUTE_SOURCE_DIR}/${arm_compute}")
+    else()
+        set(arm_compute ${ARM_COMPUTE_BINARY_DIR}/libarm_compute-static.a)
+        set(arm_compute_full_path "${arm_compute}")
+    endif()
 
     add_custom_command(
         OUTPUT
-            ${arm_compute}
-            ${arm_compute_core}
+            ${arm_compute_full_path}
         COMMAND ${CMAKE_COMMAND} -E env ${cmake_build_env}
             ${SCONS} ${ARM_COMPUTE_OPTIONS}
                 ${arm_compute}
-                ${arm_compute_core}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ComputeLibrary
+        WORKING_DIRECTORY ${ARM_COMPUTE_SOURCE_DIR}
         COMMENT "Build Arm Compute Library"
         DEPENDS ${SOURCES}
                 ${CMAKE_CURRENT_LIST_FILE}
-                ${ARM_COMPURE_SOURCE_DIR}/SConscript
-                ${ARM_COMPURE_SOURCE_DIR}/SConstruct
-                )
+                ${ARM_COMPUTE_SOURCE_DIR}/SConscript
+                ${ARM_COMPUTE_SOURCE_DIR}/SConstruct)
 
     # Import targets
 
-    add_custom_target(arm_compute_static_libs
-        DEPENDS
-            ${arm_compute}
-            ${arm_compute_core}
-    )
+    add_custom_target(arm_compute_static_libs DEPENDS ${arm_compute_full_path})
 
     add_library(arm_compute::arm_compute STATIC IMPORTED GLOBAL)
     set_target_properties(arm_compute::arm_compute PROPERTIES
-        IMPORTED_LOCATION ${arm_compute}
-        INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/ComputeLibrary)
+        IMPORTED_LOCATION ${arm_compute_full_path}
+        INTERFACE_INCLUDE_DIRECTORIES ${ARM_COMPUTE_SOURCE_DIR})
     add_dependencies(arm_compute::arm_compute arm_compute_static_libs)
 
-    add_library(arm_compute::arm_compute_core STATIC IMPORTED GLOBAL)
-    set_target_properties(arm_compute::arm_compute_core PROPERTIES
-        IMPORTED_LOCATION ${arm_compute_core}
-        INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/ComputeLibrary)
-    add_dependencies(arm_compute::arm_compute_core arm_compute_static_libs)
-
     add_library(arm_compute::half INTERFACE IMPORTED GLOBAL)
     set_target_properties(arm_compute::half PROPERTIES
-        INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/ComputeLibrary/include)
-endif()
+        INTERFACE_INCLUDE_DIRECTORIES ${ARM_COMPUTE_SOURCE_DIR}/include)
+
+    # Compute Library uses cppthreads=1
+    # if one day will rely on TBB only, we can omit this dependency
+    find_package(Threads REQUIRED)
+    set_target_properties(arm_compute::arm_compute PROPERTIES
+        INTERFACE_LINK_LIBRARIES Threads::Threads)
+
+    # Helpers for oneDNN intergation
+
+    set(ACL_FOUND ON)
+    set(ACL_LIBRARIES arm_compute::arm_compute arm_compute::half)
+
+    foreach(acl_library IN LISTS ACL_LIBRARIES)
+        list(APPEND ACL_INCLUDE_DIRS
+                $<TARGET_PROPERTY:${acl_library},INTERFACE_INCLUDE_DIRECTORIES>)
+    endforeach()
+
+    # required by oneDNN to attempt to parse ACL version
+    set(ENV{ACL_ROOT_DIR} "${ARM_COMPUTE_SOURCE_DIR}")
+endif()
\ No newline at end of file
